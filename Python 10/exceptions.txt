1. map() და ლამბდა ფუნქციის გამოყენებით ლისტის თითოეული ელემენტი აიყვანეთ კბვადრატში

///////////////////////////////////////////////////

2. filter() და ლამბდას გამოყენებით დააბრუნეთ ლისტიდან ყველა ის რიცხვი, რომელიც კენტია

////////////////////////////////////////////////////

3.აღწერეთ map(), reduce(), filter(), zip(), ანუ რა უნდა გადავცეთ, სინტაქსი....

//////////////////////////////////////////////////////

4. იპოვეთ რიცხვების კვადრატების ჯამი.(ეს უბრალოდ განიხილეთ)
from functools import reduce

numbers = [1, 2, 3, 4]
sum_of_squares = reduce(lambda x, y: x + y, map(lambda x: x**2, numbers))
print(sum_of_squares) 

//////////////////////////////////////////
5. მეპის, რენდომ მოდულისა და ლამბდას გამოყენებით დაწერეთ პროგრამა, რომელიც არსებულ ლისტში მოცემულ ქულებს უმატებს რენდომად შერჩეულ რიცხვს(1-დან 100-მდე).
(ლისტი წინასწარ განსაზღვრეთ თქვენით)

/////////////////////////////////////////////////////////////////////////
6. დააგენერირეთ რენდომ ელემენტებისგან(ინტეჯერებისგან) შემდგარი 5 ელემენტიანი ლისტი.
გამოიყენეთ გამონაკლისები და სთხოვეთ იუზერს შემოიყვანოს ინდექსი და იმის მიხედვით დაუბრუნეთ შესაბამისი ელემენტი.(ერორის ტიპები: IndexError, ValueError)

/////////////////////////////////////////////////////////////////////////
7. ლექციაზე ბოლოს განხილული მაგალითის ანალოგი დაწერეთ, თუ რამე გაუმჯობესებას დაუმაგტებთ უმჯობესი იქნება, მაგალითად რამდენიმე raise ....

////////////////////////////////////////////////////////////////////////////////////
თავისუფალი დროსთვის: 

ამოცანა: საბანკო სისტემა გამონაკლისებით
მიზანი: შექმენით მარტივი საბანკო სისტემა, სადაც მომხმარებლებს შეეძლებათ დეპოზიტის შეტანა, გატანა და ბალანსის შემოწმება. პროგრამა უნდა გაუმკლავდეს სხვადასხვა გამონაკლისებს try-except-ის გამოყენებით და უნდა იყოს ფუნქციების გამოყენებით.

ეტაპები:

- შექმენით ლექსიკონი მომხმარებლის ანგარიშის შესანახად . user_balances = {"user1": 1000, "user2": 500}
- განსაზღვრეთ დეპოზიტის, გატანის და ბალანსის შემოწმების ფუნქციები.
- გამოიყენეთ ბლოკების try-except-ის შეყვანის შეცდომების დასამუშავებლად (მაგ., არარიცხობრივი მნიშვნელობის შეყვანა, ხელმისაწვდომ ბალანსზე მეტის ამოღება, უარყოფითი დეპოზიტები).
- პროგრამა არ სრულდება იქამდე, სანამ მომხმარებელი არ მიუთითებს გასვლას.( ანუ ცალკე ფუნქცია გქონდეთ ამისთვის, სადაც ინფუთს დაამუშავებთ)



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ამოცანა: მოსწავლეთა ქულების დამუშავება
მიზანი: დაწერეთ პითონის პროგრამა, რომელიც ამუშავებს მოსწავლეთა შეფასებებს map(), filter(), zip() და reduce() გამოყენებით.

ეტაპები
- შექმენით მოსწავლეთა სახელების სია და მათი შეფასებების შესაბამისი სია.
- გამოიყენეთ zip() სახელებისა და კლასების  გაერთიანებისთვის.
- გამოიყენეთ map(), რომელიც ციფრებს(A-90-100...)  ასოებად გარდაქმნის.
-  გამოიყენეთ filter() იმ სტუდენტების საპოვნელად, რომლებმაც ჩააბარეს (მაგ., ქულა ≥ 50).
-  გამოიყენეთ reduce() საშუალო კლასის შეფასების გამოსათვლელად.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////